// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider  = "postgres"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String         @id @default(cuid())
  name          String?
  username      String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Questions     Question[]
  QuestionVotes QuestionVote[]
  Answers       Answer[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  AnswerVote    AnswerVote[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Question {
  id            String         @id @default(cuid())
  title         String
  description   Json
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  author        User           @relation(fields: [authorId], references: [id])
  authorId      String
  QuestionVotes QuestionVote[]
  Answers       Answer[]
  QuestionTags  QuestionTag[]
}

model QuestionVote {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  vote       Vote
  question   Question @relation(fields: [questionId], references: [id])
  questionId String

  @@id([userId, questionId])
}

model Answer {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  question    Question     @relation(fields: [questionId], references: [id])
  questionId  String
  content     Json
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  AnswerVotes AnswerVote[]
}

model AnswerVote {
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  vote     Vote
  answer   Answer @relation(fields: [answerId], references: [id])
  answerId String

  @@id([userId, answerId])
}

model QuestionTag {
  id         String   @id @default(cuid())
  text       String
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
}

enum Vote {
  UP
  DOWN
}
